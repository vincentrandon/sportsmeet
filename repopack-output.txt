================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-27T16:20:41.385Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
accounts/
  migrations/
    __init__.py
  __init__.py
  admin.py
  apps.py
  models.py
  tests.py
  urls.py
  views.py
config/
  __init__.py
  asgi.py
  settings.py
  urls.py
  wsgi.py
planner/
  management/
    commands/
      import_players.py
  migrations/
    __init__.py
    0001_initial.py
    0002_match_occurrence.py
    0003_player_role.py
    0004_alter_player_team.py
    0005_alter_player_team.py
    0006_attendance.py
    0007_match_slug.py
    0008_team_captain_team_players.py
    0009_match_championship.py
    0010_remove_team_players_alter_player_team.py
    0011_team_players_alter_player_team.py
    0012_alter_player_team.py
    0013_alter_match_date.py
    0014_player_email.py
    0015_attendance_email_status_attendance_last_email_sent.py
    0016_subchampionship_match_subchampionship_and_more.py
    0017_player_groups_player_is_active_player_is_staff_and_more.py
  templatetags/
    __init__.py
    custom_filters.py
  __init__.py
  admin.py
  apps.py
  forms.py
  models.py
  tests.py
  urls.py
  utils.py
  views.py
theme/
  __init__.py
  apps.py
manage.py

================================================================
Repository Files
================================================================

================
File: accounts/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: accounts/apps.py
================
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

================
File: accounts/models.py
================
from django.db import models

# Create your models here.

================
File: accounts/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: accounts/urls.py
================
from django.urls import path
from django.contrib.auth import views as auth_views
from .views import ProfileView, login_view

app_name = 'accounts'

urlpatterns = [
    path('login/', login_view, name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('password_change/', auth_views.PasswordChangeView.as_view(template_name='accounts/password-change.html'), name='password_change'),
    path('password_change/done/', auth_views.PasswordChangeDoneView.as_view(template_name='accounts/password-change-done.html'), name='password_change_done'),
    path('password_reset/', auth_views.PasswordResetView.as_view(template_name='accounts/password-reset.html'), name='password_reset'),
    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(template_name='accounts/password-reset-done.html'), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='accounts/password-reset-confirm.html'), name='password_reset_confirm'),
    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(template_name='accounts/password-reset-complete.html'), name='password_reset_complete'),
    path('profile/', ProfileView.as_view(), name='profile'),
]

================
File: accounts/views.py
================
from django.contrib import messages
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views.generic import UpdateView

from planner.models import Player


def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('planner:index')
        else:
            for error in form.non_field_errors():
                messages.error(request, f"Erreur: {error}")

    else:
        form = AuthenticationForm()

    return render(request, 'accounts/login.html', {'form': form})


class ProfileView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Player
    fields = ['name', 'email', 'licence_number']
    template_name = 'accounts/profile.html'
    success_url = reverse_lazy('accounts:profile')
    success_message = "Votre profil a été mis à jour avec succès."

    def get_object(self, queryset=None):
        return self.request.user

================
File: config/asgi.py
================
"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_asgi_application()

================
File: config/settings.py
================
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ypdq#*p69dg^*vre4d7s=w9qcy7#zi@&=b@c-7w*7^1_2h@*kn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'planner',
    'accounts',
    'tailwind',
    'theme',
    'django_htmx',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

#USER MODEL
AUTH_USER_MODEL = 'planner.Player'

#LOGIN REDIRECT
LOGIN_REDIRECT_URL = 'planner:index'



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    '127.0.0.1',
    ]

# MEDIAS
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'mediafiles'

#EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'ssl.ovh.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'vincent@keerok.tech'
EMAIL_HOST_PASSWORD = r"^mm&olDp\-y@"
DEFAULT_FROM_EMAIL = 'vincent@keerok.tech'

================
File: config/urls.py
================
"""
URL configuration for config project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

from config import settings
from django.conf.urls.static import static
from django.contrib.auth import views as auth_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls')),
    path('', include('planner.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

================
File: config/wsgi.py
================
"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_wsgi_application()

================
File: planner/management/commands/import_players.py
================
import csv
import os

from django.core.management import CommandError, BaseCommand

from planner.models import Player


class Command(BaseCommand):
    help = 'Import players from CSV)'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='The path to the CSV file to import')

    def handle(self, *args, **kwargs):
        csv_file = kwargs['csv_file']

        if not os.path.exists(csv_file):
            raise CommandError(f"The file {csv_file} does not exist")

        with open(csv_file, newline='', encoding='utf-8') as file:
            reader = csv.reader(file)
            header = next(reader)  # Skip the header row

            for row in reader:

                name, licence_number = row

                player, created = Player.objects.get_or_create(
                    name=name,
                    licence_number=licence_number
                )

                if created:
                    self.stdout.write(self.style.SUCCESS(f"Successfully added player: {name}"))
                else:
                    self.stdout.write(self.style.WARNING(f"Failed creating: {name}"))

        self.stdout.write(self.style.SUCCESS('CSV file imported successfully'))

================
File: planner/migrations/0001_initial.py
================
# Generated by Django 5.0.6 on 2024-06-26 14:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Championship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('championship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.championship')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('licence_number', models.CharField(max_length=100)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.team')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team2', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team1', to='planner.team')),
            ],
        ),
    ]

================
File: planner/migrations/0002_match_occurrence.py
================
# Generated by Django 5.0.6 on 2024-06-26 15:53

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='match',
            name='occurrence',
            field=models.CharField(blank=True, max_length=100),
        ),
    ]

================
File: planner/migrations/0003_player_role.py
================
# Generated by Django 5.0.6 on 2024-06-26 15:56

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0002_match_occurrence'),
    ]

    operations = [
        migrations.AddField(
            model_name='player',
            name='role',
            field=models.CharField(choices=[('CP', 'Captain'), ('PL', 'Player')], default='PL', max_length=2),
        ),
    ]

================
File: planner/migrations/0004_alter_player_team.py
================
# Generated by Django 5.0.6 on 2024-06-26 15:58

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0003_player_role'),
    ]

    operations = [
        migrations.AlterField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='planner.team'),
        ),
    ]

================
File: planner/migrations/0005_alter_player_team.py
================
# Generated by Django 5.0.6 on 2024-06-26 16:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0004_alter_player_team'),
    ]

    operations = [
        migrations.AlterField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planner.team'),
        ),
    ]

================
File: planner/migrations/0006_attendance.py
================
# Generated by Django 5.0.6 on 2024-06-26 16:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0005_alter_player_team'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('present', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.player')),
            ],
        ),
    ]

================
File: planner/migrations/0007_match_slug.py
================
# Generated by Django 5.0.6 on 2024-06-26 17:08

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0006_attendance'),
    ]

    operations = [
        migrations.AddField(
            model_name='match',
            name='slug',
            field=models.SlugField(blank=True, max_length=100, null=True, unique=True),
        ),
    ]

================
File: planner/migrations/0008_team_captain_team_players.py
================
# Generated by Django 5.0.6 on 2024-08-21 12:31

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0007_match_slug'),
    ]

    operations = [
        migrations.AddField(
            model_name='team',
            name='captain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='captain_of', to='planner.player'),
        ),
        migrations.AddField(
            model_name='team',
            name='players',
            field=models.ManyToManyField(related_name='teams', to='planner.player'),
        ),
    ]

================
File: planner/migrations/0009_match_championship.py
================
# Generated by Django 5.0.6 on 2024-08-26 09:23

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0008_team_captain_team_players'),
    ]

    operations = [
        migrations.AddField(
            model_name='match',
            name='championship',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planner.championship'),
        ),
    ]

================
File: planner/migrations/0010_remove_team_players_alter_player_team.py
================
# Generated by Django 5.0.6 on 2024-08-26 12:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0009_match_championship'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='team',
            name='players',
        ),
        migrations.AlterField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players', to='planner.team'),
        ),
    ]

================
File: planner/migrations/0011_team_players_alter_player_team.py
================
# Generated by Django 5.0.6 on 2024-08-26 12:12

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0010_remove_team_players_alter_player_team'),
    ]

    operations = [
        migrations.AddField(
            model_name='team',
            name='players',
            field=models.ManyToManyField(related_name='teams', to='planner.player'),
        ),
        migrations.AlterField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planner.team'),
        ),
    ]

================
File: planner/migrations/0012_alter_player_team.py
================
# Generated by Django 5.0.6 on 2024-08-26 12:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0011_team_players_alter_player_team'),
    ]

    operations = [
        migrations.AlterField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planner.team'),
        ),
    ]

================
File: planner/migrations/0013_alter_match_date.py
================
# Generated by Django 5.0.6 on 2024-08-26 12:15

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0012_alter_player_team'),
    ]

    operations = [
        migrations.AlterField(
            model_name='match',
            name='date',
            field=models.DateField(default=datetime.date.today),
        ),
    ]

================
File: planner/migrations/0014_player_email.py
================
# Generated by Django 5.0.6 on 2024-08-26 13:37

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0013_alter_match_date'),
    ]

    operations = [
        migrations.AddField(
            model_name='player',
            name='email',
            field=models.EmailField(blank=True, max_length=255, null=True),
        ),
    ]

================
File: planner/migrations/0015_attendance_email_status_attendance_last_email_sent.py
================
# Generated by Django 5.0.6 on 2024-08-26 13:40

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0014_player_email'),
    ]

    operations = [
        migrations.AddField(
            model_name='attendance',
            name='email_status',
            field=models.CharField(choices=[('NOT_SENT', 'Not Sent'), ('SENT', 'Sent'), ('CONFIRMED', 'Confirmed')], default='NOT_SENT', max_length=10),
        ),
        migrations.AddField(
            model_name='attendance',
            name='last_email_sent',
            field=models.DateTimeField(blank=True, null=True),
        ),
    ]

================
File: planner/migrations/0016_subchampionship_match_subchampionship_and_more.py
================
# Generated by Django 5.0.6 on 2024-08-26 16:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0015_attendance_email_status_attendance_last_email_sent'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubChampionship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('required_players', models.PositiveIntegerField()),
                ('championship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subchampionships', to='planner.championship')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='subchampionship',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planner.subchampionship'),
        ),
        migrations.AddField(
            model_name='team',
            name='subchampionship',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planner.subchampionship'),
        ),
    ]

================
File: planner/migrations/0017_player_groups_player_is_active_player_is_staff_and_more.py
================
# Generated by Django 5.0.6 on 2024-08-27 15:14

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('planner', '0016_subchampionship_match_subchampionship_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='player',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='player',
            name='is_active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='player',
            name='is_staff',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='player',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='player',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='player',
            name='password',
            field=models.CharField(default='pingping', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='player',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='player',
            name='email',
            field=models.EmailField(blank=True, max_length=255, null=True, unique=True),
        ),
    ]

================
File: planner/templatetags/custom_filters.py
================
from django import template

register = template.Library()

@register.filter
def initials(value):
    try:
        names = value.split()
        initials = ''.join([name[0].upper() for name in names if name])
        return initials
    except Exception as e:
        return ''

@register.filter
def get_item(lst, index):
    try:
        return lst[int(index)]
    except (IndexError, ValueError):
        return None

================
File: planner/admin.py
================
from django.contrib import admin

from planner.models import Championship, Match, Player, Team, Attendance, SubChampionship


# Register your models here.
@admin.register(Championship)
class ChampionshipAdmin(admin.ModelAdmin):
    pass


@admin.register(SubChampionship)
class SubChampionshipAdmin(admin.ModelAdmin):
    pass

@admin.register(Match)
class PlayerAdmin(admin.ModelAdmin):
    pass


@admin.register(Player)
class PlayerAdmin(admin.ModelAdmin):
    pass


@admin.register(Team)
class TeamAdmin(admin.ModelAdmin):
    pass


@admin.register(Attendance)
class AttendanceAdmin(admin.ModelAdmin):
    pass

================
File: planner/apps.py
================
from django.apps import AppConfig


class PlannerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'planner'

================
File: planner/forms.py
================
from datetime import date

from django import forms
from django.urls import reverse_lazy

from planner.models import Team, Match, SubChampionship, Championship


class ChampionshipForm(forms.ModelForm):
    class Meta:
        model = Championship
        fields = ['name', 'description']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6',
                'placeholder': 'Championship Name'
            }),
            'description': forms.Textarea(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6',
                'placeholder': 'Championship Description',
                'rows': 3
            }),
        }

class SubChampionshipForm(forms.ModelForm):
    class Meta:
        model = SubChampionship
        fields = ['name', 'championship', 'required_players']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6',
                'placeholder': 'SubChampionship Name'
            }),
            'championship': forms.Select(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'
            }),
            'required_players': forms.NumberInput(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6',
                'placeholder': 'Required Players'
            }),
        }





class TeamCreateForm(forms.ModelForm):
    class Meta:
        model = Team
        fields = ['name', 'championship', 'subchampionship']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6'}),
            'championship': forms.Select(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black',
                'hx-get': reverse_lazy('planner:load-subchampionships'),
                'hx-target': '#id_subchampionship',
                'hx-trigger': 'change'}),
            'subchampionship': forms.Select(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        if 'championship' in self.data:
            try:
                championship_id = int(self.data.get('championship'))
                self.fields['subchampionship'].queryset = SubChampionship.objects.filter(championship_id=championship_id).order_by('name')
            except (ValueError, TypeError):
                pass
        elif self.instance.pk:
            self.fields['subchampionship'].queryset = self.instance.championship.subchampionships.all().order_by('name') if self.instance.championship else SubChampionship.objects.none()

class MatchForm(forms.ModelForm):
    class Meta:
        model = Match
        fields = ['team1', 'team2', 'date', 'championship', 'subchampionship']
        widgets = {
            'team1': forms.Select(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'}),
            'team2': forms.TextInput(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'}),
            'date': forms.DateInput(attrs={
                'type': 'date',
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'},
                format='%Y-%m-%d'),
            'championship': forms.Select(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'}),
            'subchampionship': forms.Select(attrs={
                'class': 'block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-orange-500 sm:text-sm sm:leading-6 [&_*]:text-black'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['subchampionship'].queryset = SubChampionship.objects.none()

        if 'championship' in self.data:
            try:
                championship_id = int(self.data.get('championship'))
                self.fields['subchampionship'].queryset = SubChampionship.objects.filter(championship_id=championship_id)
            except (ValueError, TypeError):
                pass
        elif self.instance.pk and self.instance.championship:
            self.fields['subchampionship'].queryset = self.instance.championship.subchampionships.all()

================
File: planner/models.py
================
import datetime
import uuid

from django.contrib.auth.base_user import BaseUserManager, AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin
from django.db import models
from django.urls import reverse
from django.utils.text import slugify


# Create your models here.


class PlayerManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("L'email doit être renseigné")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self.create_user(email, password, **extra_fields)


class Player(AbstractBaseUser, PermissionsMixin):

    ROLE = (
        ('CP', 'Captain'),
        ('PL', 'Player'),
    )

    name = models.CharField(max_length=100)
    licence_number = models.CharField(max_length=100)
    role = models.CharField(max_length=2, choices=ROLE, default='PL')
    team = models.ForeignKey('Team', on_delete=models.SET_NULL, blank=True, null=True)
    email = models.EmailField(max_length=255, blank=True, null=True, unique=True)

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']

    objects = PlayerManager()


    def __str__(self):
        return self.name

    def get_full_name(self):
        return f"{self.name}"

    def get_initals(self):
        return "".join([name[0] for name in self.name.split()])

    def get_role_display(self):
        return dict(self.ROLE)[self.role]



class Championship(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name

class SubChampionship(models.Model):
    name = models.CharField(max_length=100)
    championship = models.ForeignKey(Championship, on_delete=models.CASCADE, related_name='subchampionships')
    required_players = models.PositiveIntegerField()

    def __str__(self):
        return f"{self.name} ({self.championship.name})"


class Team(models.Model):
    name = models.CharField(max_length=100)
    championship = models.ForeignKey(Championship, on_delete=models.CASCADE)
    subchampionship = models.ForeignKey(SubChampionship, on_delete=models.CASCADE, null=True, blank=True)
    players = models.ManyToManyField(Player, related_name='teams')
    captain = models.ForeignKey(Player, on_delete=models.SET_NULL, null=True, blank=True, related_name='captain_of')

    def __str__(self):
        return f'{self.name} - {self.championship}'









class Match(models.Model):
    team1 = models.ForeignKey(Team, on_delete=models.CASCADE, related_name='team1')
    team2 = models.CharField(max_length=100)
    occurrence = models.CharField(max_length=100, blank=True)
    date = models.DateField(default=datetime.date.today)
    slug = models.SlugField(max_length=100, unique=True, null=True, blank=True)
    championship = models.ForeignKey(Championship, on_delete=models.CASCADE, blank=True, null=True)
    subchampionship = models.ForeignKey(SubChampionship, on_delete=models.CASCADE, blank=True, null=True)

    def __str__(self):
        if self.team2:
            return f"{self.team1} vs {self.team2}"
        else:
            return f"{self.team1} vs TBA"

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(f'{self.team1} vs {self.team2} {self.date}')
        if not self.championship and self.team1.championship:
            self.championship = self.team1.championship
        if not self.subchampionship and self.team1.subchampionship:
            self.subchampionship = self.team1.subchampionship
        super().save(*args, **kwargs)


    def get_absolute_url(self):
        return f'/matches/{self.slug}'


class Attendance(models.Model):
    EMAIL_STATUS_CHOICES = [
        ('NOT_SENT', 'Not Sent'),
        ('SENT', 'Sent'),
        ('CONFIRMED', 'Confirmed'),
    ]

    player = models.ForeignKey('Player', on_delete=models.CASCADE)
    match = models.ForeignKey('Match', on_delete=models.CASCADE)
    present = models.BooleanField(default=False)
    email_status = models.CharField(max_length=10, choices=EMAIL_STATUS_CHOICES, default='NOT_SENT')
    last_email_sent = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"{self.player} - {self.match}"

================
File: planner/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: planner/urls.py
================
from django.conf.urls.static import static
from django.urls import path

from config import settings
from planner.views import index, single_match, team_index, create_team, search_players, add_player, edit_team, \
    nominate_captain, matches_index, create_match, select_players, delete_team, delete_match, edit_match_team, \
    send_confirmation_email, confirm_attendance, search, load_subchampionships, create_championship, \
    create_subchampionship, confirm_attendance_manual, remove_attendance

app_name = 'planner'
urlpatterns = [
    path('', index, name='index'),

    #championships

    #matches
    path('matches/', matches_index, name='matches-index'),
    path('matches/<str:slug>', single_match, name='match-detail'),
    path('matches/create/', create_match, name='create-match'),
    path('matches/<int:match_id>/select-players/', select_players, name='select-players'),
    path('matches/<str:slug>/delete/', delete_match, name='delete-match'),
    path('matches/<str:slug>/edit-team/', edit_match_team, name='edit-match-team'),

    #teams
    path('teams/', team_index, name='team-index'),
    path('teams/create/', create_team, name='team-create'),
    path('teams/search-players/', search_players, name='search-players'),
    path('teams/add-player/', add_player, name='add-player'),
    path('teams/nominate-captain/', nominate_captain, name='nominate-captain'),
    path('teams/<int:team_id>/edit/', edit_team, name='team-edit'),
    path('teams/<int:team_id>/delete/', delete_team, name='team-delete'),
    path('teams/load-subchampionships/', load_subchampionships, name='load-subchampionships'),
    path('teams/create/create-championship/', create_championship, name='create-championship'),
    path('teams/create/create-subchampionship/', create_subchampionship, name='create-subchampionship'),

    #attendances
    path('send-confirmation-email/<int:attendance_id>/', send_confirmation_email, name='send_confirmation_email'),
    path('confirm-attendance/<str:token>/', confirm_attendance, name='confirm_attendance'),
    path('confirm-attendance-manual/<int:attendance_id>/', confirm_attendance_manual, name='confirm_attendance_manual'),
    path('remove-attendance/<int:attendance_id>/', remove_attendance, name='remove_attendance'),



    #search
    path('search/', search, name='search'),

] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

================
File: planner/utils.py
================
from django.core import signing
from django.conf import settings

def generate_token(attendance_id):
    return signing.dumps(attendance_id, salt=settings.SECRET_KEY)

def validate_token(token):
    try:
        attendance_id = signing.loads(token, salt=settings.SECRET_KEY, max_age=60*60*24*7)  # Token valid for 7 days
        return attendance_id
    except signing.BadSignature:
        return None

================
File: planner/views.py
================
import json

from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.core.mail import send_mail
from django.core.paginator import Paginator
from django.db import transaction
from django.db.models import Q, Count
from django.http import JsonResponse, HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.template.loader import render_to_string
from django.urls import reverse, reverse_lazy
from django.utils import timezone
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST, require_GET
from django.views.generic import UpdateView

from config import settings
from planner.forms import TeamCreateForm, MatchForm, ChampionshipForm, SubChampionshipForm
from planner.models import Championship, Match, Player, Team, Attendance, SubChampionship
from planner.utils import generate_token, validate_token


@login_required
def index(request):
    upcoming_matches = Match.objects.filter(date__gte=timezone.now()).order_by('date')
    past_matches = Match.objects.filter(date__lt=timezone.now()).order_by('-date')

    # Annotate matches with confirmed attendance count
    upcoming_matches = upcoming_matches.annotate(
        confirmed_count=Count('attendance', filter=Q(attendance__present=True))
    )

    # Paginate upcoming matches
    paginator = Paginator(upcoming_matches, 10)  # Show 10 matches per page
    page_number = request.GET.get('page', 1)
    page_obj = paginator.get_page(page_number)

    context = {
        'upcoming_matches': page_obj,
        'past_matches': past_matches,
    }

    if request.htmx:
        return render(request, 'home/partials/upcoming-matches.html', context)
    return render(request, 'home/index.html', context)

# CHAMPIONSHIPS

@login_required
def create_championship(request):
    if request.method == 'POST':
        form = ChampionshipForm(request.POST)
        if form.is_valid():
            championship = form.save()
            return JsonResponse({
                'success': True,
                'option': f'<option value="{championship.id}" selected>{championship.name}</option>',
                'toast': {
                    'title': 'Success!',
                    'message': 'A new championship has been created.'
                }
            })
    else:
        form = ChampionshipForm()
    return render(request, 'championships/championship-form.html', {'form': form})


@login_required
def create_subchampionship(request):
    if request.method == 'POST':
        form = SubChampionshipForm(request.POST)
        if form.is_valid():
            subchampionship = form.save()
            return JsonResponse({
                'success': True,
                'option': f'<option value="{subchampionship.id}" selected>{subchampionship.name}</option>',
                'toast': {
                    'title': 'Success!',
                    'message': 'A new subchampionship has been created.'
                }
            })
    else:
        form = SubChampionshipForm()
    return render(request, 'championships/subchampionship-form.html', {'form': form})


### MATCHES


@login_required
def matches_index(request):
    # Get all matches
    matches = Match.objects.all().order_by('-date')

    # Filter by championship
    championship_id = request.GET.get('championship')
    if championship_id:
        matches = matches.filter(championship_id=championship_id)

    # Filter by date range
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    if start_date and end_date:
        matches = matches.filter(date__range=[start_date, end_date])

    # Search
    search_query = request.GET.get('search')
    if search_query:
        matches = matches.filter(
            Q(team1__name__icontains=search_query) |
            Q(team2__icontains=search_query)
        )

    # Pagination
    paginator = Paginator(matches, 10)  # Show 10 matches per page
    page_number = request.GET.get('page', 1)
    page_obj = paginator.get_page(page_number)

    # Get all championships for the filter dropdown
    championships = Championship.objects.all()

    context = {
        'page_obj': page_obj,
        'championships': championships,
        'current_page': int(page_number)
    }

    if request.htmx:
        return render(request, 'matches/partials/matches-table-body.html', context)
    return render(request, 'matches/matches.html', context)

@login_required
def single_match(request, slug):
    match = get_object_or_404(Match, slug=slug)
    team = match.team1
    all_players = team.players.all()
    attendances = Attendance.objects.filter(match=match)

    context = {
        'match': match,
        'all_players': all_players,
        'attendances': attendances,
        'selected_count': attendances.count()
    }
    return render(request, 'matches/single-match.html', context)

@login_required
def create_match(request):
    if request.method == 'POST':
        form = MatchForm(request.POST)
        if form.is_valid():
            match = form.save()
            return redirect('planner:select-players', match_id=match.id)
    else:
        form = MatchForm()

    return render(request, 'matches/create-match.html', {'form': form})

@login_required
def edit_match_team(request, slug):
    match = get_object_or_404(Match, slug=slug)
    team = match.team1
    all_players = team.players.all()
    current_attendances = Attendance.objects.filter(match=match).values_list('player_id', flat=True)

    if request.method == 'POST':
        selected_player_ids = request.POST.getlist('players')

        # Remove all current attendances
        Attendance.objects.filter(match=match).delete()

        # Create new attendances for selected players
        for player_id in selected_player_ids:
            Attendance.objects.create(match=match, player_id=player_id, present=True)

        return redirect('planner:match-detail', slug=match.slug)

    context = {
        'match': match,
        'all_players': all_players,
        'current_attendances': set(current_attendances),  # Convert to set for faster lookup
    }
    return render(request, 'matches/edit-match-team.html', context)

@login_required
def select_players(request, match_id):
    match = get_object_or_404(Match, id=match_id)
    print(match.team1)
    players = match.team1.players.all()
    print(players)
    attendances = Attendance.objects.filter(match=match)

    if request.method == 'POST':
        selected_player_ids = request.POST.getlist('players')
        Attendance.objects.filter(match=match).delete()
        for player_id in selected_player_ids:
            Attendance.objects.create(match=match, player_id=player_id, present=False)
        return redirect('planner:match-detail', slug=match.slug)

    context = {
        'match': match,
        'players': players,
        'attendances': {a.player_id: a.present for a in attendances},
    }
    return render(request, 'matches/select-players.html', context)


@login_required
@require_POST
@csrf_exempt
def delete_match(request, slug):
    match = Match.objects.get(slug=slug)
    match.delete()
    matches = Match.objects.all()
    return render(request, 'matches/partials/matches-table-body.html', {'matches': matches})


### TEAMS
@login_required
def team_index(request):
    teams = Team.objects.all()
    return render(request, 'teams/teams.html', {'teams': teams})

@login_required
def create_team(request):
    if request.method == 'POST':
        form = TeamCreateForm(request.POST)
        if form.is_valid():
            team = form.save()
            selected_player_ids = request.POST.getlist('selected_players')
            selected_players = Player.objects.filter(id__in=selected_player_ids)
            team.players.add(*selected_players)
            request.session['selected_players'] = []
            return redirect('planner:team-index')
    else:
        form = TeamCreateForm()
        selected_player_ids = request.session.get('selected_players', [])
        selected_players = Player.objects.filter(id__in=selected_player_ids)
        all_players = Player.objects.all()

    return render(request, 'teams/create-team.html', {
        'form': form,
        'selected_players': selected_players,
        'players': all_players
    })

@login_required
def search_players(request):
    query = request.GET.get('search', '')
    team_id = request.GET.get('team_id')

    if team_id:
        team = get_object_or_404(Team, id=team_id)
        selected_players = team.players.all()
        if query:
            players = Player.objects.filter(name__icontains=query).exclude(id__in=selected_players)
        else:
            players = Player.objects.exclude(id__in=selected_players)
    else:
        selected_player_ids = request.session.get('selected_players', [])
        if query:
            players = Player.objects.filter(name__icontains=query).exclude(id__in=selected_player_ids)
        else:
            players = Player.objects.exclude(id__in=selected_player_ids)

    context = {
        'players': players,
        'selected_players': selected_player_ids if not team_id else list(selected_players.values_list('id', flat=True)),
    }
    if team_id:
        context['team'] = team

    return render(request, 'teams/partials/players-list.html', context)

@login_required
def add_player(request):
    if request.method == 'POST':
        player_id = request.POST.get('player_id')
        action = request.POST.get('action')
        team_id = request.POST.get('team_id')

        if team_id:
            team = get_object_or_404(Team, id=team_id)
            if action == 'add':
                team.players.add(player_id)
            elif action == 'remove':
                team.players.remove(player_id)
                if team.captain_id == int(player_id):
                    team.captain = None
                    team.save()
            selected_players = team.players.all()
        else:
            if 'selected_players' not in request.session:
                request.session['selected_players'] = []

            selected_players = request.session['selected_players']

            if action == 'add' and player_id not in selected_players:
                selected_players.append(player_id)
            elif action == 'remove' and player_id in selected_players:
                selected_players.remove(player_id)

            request.session['selected_players'] = selected_players
            request.session.modified = True
            selected_players = Player.objects.filter(id__in=selected_players)


        all_players = Player.objects.all()

        context = {
            'selected_players': selected_players,
            'players': all_players,
        }
        if team_id:
            context['team'] = team

        return render(request, 'teams/partials/player-lists-container.html', context)

    return HttpResponse(status=400)

@login_required
def nominate_captain(request):
    if request.method == 'POST':
        player_id = request.POST.get('player_id')
        team_id = request.POST.get('team_id')
        action = request.POST.get('action')

        player = get_object_or_404(Player, id=player_id)
        team = get_object_or_404(Team, id=team_id)

        toast_message = ''
        toast_type = 'info'

        with transaction.atomic():
            if action == 'nominate':
                if team.captain and team.captain != player:
                    toast_message = 'A captain has already been nominated for this team.'
                    toast_type = 'error'
                else:
                    if team.captain:
                        team.captain.role = 'PL'
                        team.captain.save()

                    team.captain = player
                    player.role = 'CP'
                    player.save()
                    team.save()
                    toast_message = f'{player.name} has been nominated as captain.'
                    toast_type = 'success'
            elif action == 'remove':
                if team.captain == player:
                    team.captain = None
                    player.role = 'PL'
                    player.save()
                    team.save()
                    toast_message = f'{player.name} has been removed as captain.'
                    toast_type = 'success'
                else:
                    toast_message = f'{player.name} is not the current captain.'
                    toast_type = 'error'

        # Re-render the entire player lists container
        context = {
            'selected_players': team.players.all(),
            'players': Player.objects.exclude(id__in=team.players.all()),
            'team': team,
            'toast_message': toast_message,
            'toast_type': toast_type,
        }
        updated_html = render_to_string('teams/partials/player-lists-container.html', context, request=request)

        return HttpResponse(updated_html)

    return HttpResponse('Invalid request method', status=400)

@login_required
def edit_team(request, team_id):
    team = get_object_or_404(Team, id=team_id)
    if request.method == 'POST':
        form = TeamCreateForm(request.POST, instance=team)
        if form.is_valid():
            team = form.save()
            selected_player_ids = request.POST.getlist('selected_players')
            print(f'selected_players: {selected_player_ids}')
            selected_players = Player.objects.filter(id__in=selected_player_ids)
            team.players.add(*selected_players)
            return redirect('planner:team-index')
    else:
        form = TeamCreateForm(instance=team)
        print(form.fields['subchampionship'].choices)



    selected_players = team.players.all()
    all_players = Player.objects.all()

    context = {
        'form': form,
        'team': team,
        'selected_players': selected_players,
        'players': all_players,
    }
    return render(request, 'teams/edit-team.html', context)


@login_required
def load_subchampionships(request):
    championship_id = request.GET.get('championship')
    subchampionships = SubChampionship.objects.filter(championship_id=championship_id).order_by('name')
    return render(request, 'teams/partials/subchampionship-options.html', {'subchampionships': subchampionships})


@require_POST
@csrf_exempt
def delete_team(request, team_id):
    team = get_object_or_404(Team, id=team_id)
    team.delete()
    teams = Team.objects.all()
    return render(request, 'teams/partials/team-table-body.html', {'teams': teams})


### ATTENDANCES
@require_POST
def send_confirmation_email(request, attendance_id):
    attendance = get_object_or_404(Attendance, id=attendance_id)

    if attendance.email_status == 'CONFIRMED':
        return JsonResponse({'status': 'info', 'message': 'Attendance already confirmed'})

    token = generate_token(attendance_id)
    confirmation_url = request.build_absolute_uri(
        reverse('planner:confirm_attendance', args=[token])
    )

    subject = f"Confirmation de présence - Match {attendance.match}"
    message = f"""
    Bonjour {attendance.player.name},

    Veuillez confirmer votre présence pour le match {attendance.match} en cliquant sur le lien suivant:
    {confirmation_url}

    Merci,
    L'équipe de gestion
    """

    try:
        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [attendance.player.email],
            fail_silently=False,
        )
        attendance.email_status = 'SENT'
        attendance.last_email_sent = timezone.now()
        attendance.save()
        return JsonResponse({'status': 'success', 'message': 'Email sent successfully'})
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)})


@require_GET
def confirm_attendance(request, token):
    attendance_id = validate_token(token)
    if attendance_id:
        attendance = get_object_or_404(Attendance, id=attendance_id)
        attendance.present = True
        attendance.email_status = 'CONFIRMED'
        attendance.save()
        return render(request, 'utils/attendance-confirmed.html', {'attendance': attendance})
    else:
        return render(request, 'utils/invalid-token.html')


@require_POST
def confirm_attendance_manual(request, attendance_id):
    attendance = get_object_or_404(Attendance, id=attendance_id)
    attendance.present = True
    attendance.email_status = 'CONFIRMED'
    attendance.save()
    return JsonResponse({'status': 'success', 'message': 'Attendance confirmed successfully'})


@require_POST
def remove_attendance(request, attendance_id):
    attendance = get_object_or_404(Attendance, id=attendance_id)
    attendance.present = False
    attendance.save()
    return JsonResponse({'status': 'success', 'message': 'Attendance removed successfully'})


# Search
@login_required
def search(request):
    query = request.GET.get('q', '')
    teams = Team.objects.filter(name__icontains=query)[:5]
    matches = Match.objects.filter(
        Q(team1__name__icontains=query) |
        Q(team2__icontains=query)
    )[:5]

    team_results = [{'id': team.id, 'name': team.name} for team in teams]
    match_results = [{'slug': match.slug, 'team1': str(match.team1), 'team2': match.team2} for match in matches]

    return JsonResponse({
        'teams': team_results,
        'matches': match_results,
    })

================
File: theme/apps.py
================
from django.apps import AppConfig


class ThemeConfig(AppConfig):
    name = 'theme'

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
